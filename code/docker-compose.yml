version: '3.8'

services:
  # MongoDB Service
  mongo:
    image: mongo:latest
    container_name: mongodb-cache
    environment:
      MONGO_INITDB_DATABASE: meteoservice
    volumes:
      - ./init/init.js:/docker-entrypoint-initdb.d/init.js  # Initialize database with indices
      - mongo-data:/data/db
    ports:
      - "27017:27017"  # Expose MongoDB on port 27017

  # Zookeeper Service
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181

  # Kafka Service
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - "zookeeper"
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092, PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT, PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Kafdrop Service: A web UI for monitoring Kafka brokers, topics, consumers, and more.
  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - "kafka"

  # Meteoservice application
  meteoservice:
    build: .  # Build the meteoservice from the current directory (must contain a Dockerfile)
    depends_on:
      - mongo
      - kafka
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://mongo:27017/meteoservice

# Volumes: Persistent storage for services
volumes:
  mongo-data:
