version: '3.8'

services:
  # MongoDB Service
  mongo:
    image: mongo:latest
    container_name: mongodb-cache
    environment:
      MONGO_INITDB_DATABASE: meteoservice
    volumes:
      - ./init/init.js:/docker-entrypoint-initdb.d/init.js  # Initialize database with indices
      - mongo-data:/data/db
    ports:
      - "27017:27017"  # Expose MongoDB on port 27017

  # Zookeeper Service
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    container_name: zookeeper
    ports:
      - "2181:2181"

  # Kafka Service
  kafka:
    image: wurstmeister/kafka:2.12-2.3.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Kafdrop Service: A web UI for monitoring Kafka brokers, topics, consumers, and more.
  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    ports:
      - "9000:9000"
    depends_on:
      - kafka

  meteoservice:
    build: .  # Build the meteoservice from the current directory (must contain a Dockerfile)
    depends_on:
      - mongo
      - kafka
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://mongo:27017/meteoservice

  # Spring Boot Consumer
  springbootconsumer:
    image: openjdk:17-jdk-slim  # Use an official Java image
    container_name: springboot-consumer
    depends_on:
      - kafka
    volumes:
      - ./SpringBootConsumer-0.0.1-SNAPSHOT.jar:/app/SpringBootConsumer-0.0.1-SNAPSHOT.jar  # Mount the JAR into the container
    entrypoint: ["java", "-jar", "/app/SpringBootConsumer-0.0.1-SNAPSHOT.jar", "-Dspring.kafka.bootstrap-servers=kafka:9092"]
    environment:
      - KAFKA_BROKER=kafka:9092

# Volumes: Persistent storage for services
volumes:
  mongo-data:
